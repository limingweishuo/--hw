1、删除分支
    git branch -d 分支名1  分支名2  分支名3    |----|    删除多个分支1、2、3

2、下载特定分支git clone 或 git lfs clone
    git clone 下载地址.git    |----|    下载地址整条分支代码
    git clone -b 分支名称 --single-branch 下载地址.git    |----|    下载地址中单独某条分支，记得带参数--single-branch 

    git clone --depth=number 下载地址.git    |----|    下载地址中最近number次提交的整条分支代码
    git clone --depth number 下载地址.git    |----|    下载地址中最近number次提交的整条分支代码

3、切换到某个文件夹
    cd ProjectPath    |----|    cd /Downloads/G25_platform_sdk

4、查看项目分支(包括本地和远程)
    git branch -a 

5、创建文件夹
    mkdir 文件名    |----|    创建文件夹，注意不能是  file1/file2 多级目录的形式，只能是单层
    cd 文件名    |----|    进入文件夹
    rm -r 文件名    |----|    删除文件夹，必须带上参数 -r ，否则不能使用

2020-2-26
----针对新提交到github上的项目：本地创建git仓库，实现从GitHub下载和远程提交到GitHub 
        1、在本地的工程目录执行git init，此工程目录是要提交到github的。git init是将本地的工程目录作为本地的git仓库。
        注：下面的git命令都是在此工程目录中执行的，如果是新建的目录请使用mkdir 文件名进行新建
        2、将待提交的代码加入到本地的仓库中：git add .
        3、将本地的工程提交到本地的git仓库：git commit -m "一些评论"
        4、登录github，创建git仓库，记录url：[github_repository_url]
        5、执行git remote add origin [github_repository_url]，将本地仓库与github上的仓库关联起来。
可以通过git remote -v查看github上的仓库地址。
        6、执行git pull origin master同步github仓库和本地仓库
        7、执行git push origin master将本地工程提交到github
        
----针对已有的GitHub项目[别人的/自己的]
        1、将项目fork到目录中。或者使用github clone github_repository_url，这样下载自带git
        注：如果之前目录就有克隆下来的文件，需要git pull一下
        2、将修改的或者新加的文件放入克隆的仓库目录中，执行git add .将改动添加到本地仓库，执行git commit -m [your_comment]将改动提交到本地仓库。
        3、执行git push origin [your-branch]将本地的改动提交到github中。如果提交到主分支上，则[your-branch]为master。即执行git push origin master

2020-2-27
----
